plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    //Devops code start
    id 'pl.allegro.tech.build.axion-release' version '1.12.0'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
    id 'com.palantir.docker-compose' version '0.22.1'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    //Devops code end
}

group = 'com.syzegee'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.syzegee.ruleengine.RuleEngineServiceApplication'
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.keycloak.bom:keycloak-adapter-bom:6.0.1'
    }
}


dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.1.7.RELEASE'
    runtimeOnly 'org.postgresql:postgresql'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.apache.httpcomponents:httpclient'
    //Devops code starts here
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    //Devops code ends here
}
test {
    ignoreFailures = true
}
// Devops code start//
String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'cmidhun'
String imageName = "${dockerHubUsernameProperty}/rule-engine-events:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}

tasks['sonarqube'].dependsOn test

// Devops code end//